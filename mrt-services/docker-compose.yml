#*********************************************************************
#   Copyright 2019 Regents of the University of California
#   All rights reserved
#*********************************************************************
version: '3.7'
networks:
  merrittnet:
services:
  ingest:
    container_name: ingest
    depends_on:
    - zoo
    - store
    - inventory
    image: cdluc3/mrt-ingest
    build:
      context: ingest
      dockerfile: Dockerfile
    networks:
      merrittnet:
    ports:
    - published: 8080
      target: 8080
    volumes:
    - type: bind
      source: ./no-track/ingest-info.txt
      target: /tdr/ingest/ingest-info.txt
    stdin_open: true
    tty: true
  store:
    container_name: store
    # cloud container assumes a hostname as part of path
    hostname: store
    depends_on:
    - zoo
    image: cdluc3/mrt-store
    build:
      context: store
      dockerfile: Dockerfile
    networks:
      merrittnet:
    ports:
    - published: 8081
      target: 8080
    environment:
      SSM_SKIP_RESOLUTION: Y
      NODE_TABLE: nodes-pairtree-docker
      MERRITT_STORE_INFO: store-info-docker
    networks:
      merrittnet:
    stdin_open: true
    tty: true
  inventory:
    container_name: inventory
    depends_on:
    - zoo
    image: cdluc3/mrt-inventory
    build:
      context: inventory
      dockerfile: Dockerfile
    networks:
      merrittnet:
    ports:
    - published: 8082
      target: 8080
    stdin_open: true
    tty: true
  zoo:
    container_name: zoo
    image: cdluc3/mrt-zookeeper
    build:
      context: zoo
      dockerfile: Dockerfile
    networks:
      merrittnet:
    ports:
    - published: 2181
      target: 2181
    stdin_open: true
    tty: true
  ui:
    container_name: ui
    image: cdluc3/mrt-dashboard
    build:
      context: ui
      dockerfile: Dockerfile
    networks:
      merrittnet:
    depends_on:
    - db-container
    ports:
    - published: 8089
      target: 8089
    environment:
      SSM_SKIP_RESOLUTION: Y
    volumes:
    # You must install this file with proper credentials
    - ./no-track/ldap-stg.yml:/var/www/app_name/config/ldap.yml
    stdin_open: true
    tty: true
  db-container:
    container_name: db-container
    image: cdluc3/mrt-database
    build:
      context: mysql
      dockerfile: Dockerfile
    networks:
      merrittnet:
    restart: always
    environment:
      MYSQL_DATABASE: 'db-name'
      MYSQL_USER: 'user'
      MYSQL_PASSWORD: 'password'
      MYSQL_ROOT_PASSWORD: 'root-password'
    ports:
    - published: 3306
      target: 3306
  smtp:
    container_name: smtp
    image: namshi/smtp
    networks:
      merrittnet:
  apache:
    container_name: apache
    image: cdluc3/mrt-apache
    build:
      context: apache
      dockerfile: Dockerfile
    ports:
    - published: 8086
      target: 80
    networks:
      merrittnet:
  # For pre-signed URL testing, you must create an entry in your /etc/hosts file to redirect my-minio-localhost-alias:9000 to localhost:9000.
  minio:
    container_name: minio
    image: minio/minio
    ports:
    - published: 9000
      target: 9000
    - published: 8088
      target: 9000
    command: server /data
    networks:
      merrittnet:
  # When initializing the minio container for the first time, you will need to create an initial bucket named my-bucket.
  minio-mc:
    container_name: minio-mc
    image: minio/mc
    entrypoint: >
      /bin/sh -c "
      sleep 15;
      mc config host add docker http://minio:9000 minioadmin minioadmin;
      mc mb docker/my-bucket;
      "
    networks:
      merrittnet:
  merritt-init:
    container_name: merritt-init
    image: cdluc3/mrt-init
    build:
      context: merritt-init
      dockerfile: Dockerfile
    networks:
      merrittnet:
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    entrypoint:
      - /bin/bash
      - '-c'
      - |
          echo "*** Pause 30 seconds then init the inventory service"
          sleep 30
          echo "*** Starting the inventory service"
          curl -X POST http://inventory:8080/inventory/service/start?t=json
          echo "*** Pause 30 seconds then ping the OAI service"
          sleep 30
          echo "*** Prompt OAI service"
          curl http://oai:8080/oai/oai/v2?verb=Identify
          echo "*** Service Init Complete"
          while(true)
          do
            echo "*** Pause 60 seconds then run dryad notifier"
            sleep 60
            docker exec -w /var/www/app_name/stash/stash-notifier dryad bundle exec main.rb
          done
