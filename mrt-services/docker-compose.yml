#*********************************************************************
#   Copyright 2019 Regents of the University of California
#   All rights reserved
#*********************************************************************
version: '3.9'
networks:
  merrittnet:
volumes:
  my-db:
  my-minio:
  my-ingest-folder:
services:
  ingest:
    container_name: ingest
    depends_on:
    - zoo
    - store
    - inventory
    image: ${ECR_REGISTRY}/mrt-ingest:dev
    build:
      context: ingest/mrt-ingest
      dockerfile: Dockerfile
      args:
        ECR_REGISTRY: ${ECR_REGISTRY}
    environment:
      SSM_SKIP_RESOLUTION: Y
      MERRITT_INGEST: ingest-docker
      SERVICE: ingest
      HOSTNAME: ingest
      LOGLEVEL: info
      CATALINA_OPTS: "-DBatchConsumerDaemon=1 -DBatchReportConsumerDaemon=1 -DEstimateConsumerDaemon=1 -DProvisionConsumerDaemon=1 -DDownloadConsumerDaemon=1 -DProcessConsumerDaemon=1 -DRecordConsumerDaemon=1 -DNotifyConsumerDaemon=1 -Dfile.encoding=UTF8 -Dorg.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH=true"
    networks:
      merrittnet:
    ports:
    - published: 8080
      target: 8080
    volumes:
    - my-ingest-folder:/tdr/ingest/queue
    restart: unless-stopped
    stdin_open: true
    tty: true
  store:
    container_name: store
    # cloud container assumes a hostname as part of path
    hostname: store
    depends_on:
    - zoo
    image: ${ECR_REGISTRY}/mrt-store:dev
    build:
      context: store/mrt-store
      dockerfile: Dockerfile
      args:
        ECR_REGISTRY: ${ECR_REGISTRY}
    ports:
    - published: 8081
      target: 8080
    volumes:
    - my-ingest-folder:/tdr/ingest/queue
    environment:
      SSM_SKIP_RESOLUTION: Y
      NODE_TABLE: nodes-pairtree-docker
      MERRITT_STORE_INFO: store-info-docker
      LOG_STORE: /dpr2store/mrtHomes/logs
      MRT_DOCKER_HOST: ${HOSTNAME}.cdlib.org
      MRT_MINIO_HOST: ${HOSTNAME}.cdlib.org
      SERVICE: store
      HOSTNAME: store
      LOGLEVEL: info
      CATALINA_OPTS: "-DAccessDaemon=1 -Dfile.encoding=UTF8 -Dorg.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH=true"
    networks:
      merrittnet:
        aliases:
        - ${HOSTNAME}.cdlib.org
    restart: unless-stopped
    stdin_open: true
    tty: true
  inventory:
    container_name: inventory
    depends_on:
    - zoo
    - ezid
    image: ${ECR_REGISTRY}/mrt-inventory:dev
    build:
      context: inventory/mrt-inventory
      dockerfile: Dockerfile
      args:
        ECR_REGISTRY: ${ECR_REGISTRY}
    networks:
      merrittnet:
    ports:
    - published: 8082
      target: 8080
    environment:
      SSM_SKIP_RESOLUTION: Y
      MERRITT_INV_INFO: inv-info-docker
      SERVICE: inventory
      HOSTNAME: inventory
      LOGLEVEL: info
    restart: unless-stopped
    stdin_open: true
    tty: true
  zoo:
    container_name: zoo
    image: public.ecr.aws/docker/library/zookeeper:3.8.4
    networks:
      merrittnet:
    ports:
    - published: 8084
      target: 2181
    restart: unless-stopped
    stdin_open: true
    tty: true
  ui:
    container_name: ui
    image: ${ECR_REGISTRY}/mrt-dashboard:dev
    build:
      context: ui/mrt-dashboard
      dockerfile: Dockerfile
    networks:
      merrittnet:
        aliases:
        - my-minio-localhost-alias
        - ${HOSTNAME}.cdlib.org
    depends_on:
    - db-container
    - ldap
    - minio
    - store
    ports:
    - published: 8086
      target: 8086
    environment:
      SSM_SKIP_RESOLUTION: Y
      MRT_DOCKER_HOST: ${HOSTNAME}.cdlib.
      SERVICE: ui
      HOSTNAME: ui
      LOGLEVEL: info
    volumes:
    - "./docker.html:/var/www/app_name/public/docker.html"
    restart: unless-stopped
    stdin_open: true
    tty: true
  db-container:
    container_name: db-container
    image: ${ECR_REGISTRY}/mrt-database
    build:
      context: mysql
      dockerfile: Dockerfile
    networks:
      merrittnet:
    restart: always
    environment:
      MYSQL_DATABASE: 'db-name'
      MYSQL_USER: 'user'
      MYSQL_PASSWORD: 'password'
      MYSQL_ROOT_PASSWORD: 'root-password'
    volumes:
    - my-db:/var/lib/mysql
  ldap:
    container_name: ldap
    image: ${ECR_REGISTRY}/mrt-opendj
    build:
      context: ldap
      dockerfile: Dockerfile
    networks:
      merrittnet:
    ports:
    - published: 1389
      target: 1389
    - published: 1636
      target: 1636
    - published: 4444
      target: 4444
    restart: unless-stopped
    stdin_open: true
    tty: true
  smtp:
    container_name: smtp 
    image: ${ECR_REGISTRY}/docker-hub/ghusta/fakesmtp
    networks:
      merrittnet:
    restart: unless-stopped
  # For pre-signed URL testing, you must create an entry in your /etc/hosts file to redirect my-minio-localhost-alias:8088 to localhost:8088.
  minio:
    container_name: minio
    image: ${ECR_REGISTRY}/mrt-minio-it:dev
    ports:
    - published: 8088
      target: 8088
    - published: 8095
      target: 9001
    command: server /buckets --address :8088 --console-address ":9001"
    networks:
      merrittnet:
        aliases:
        - my-minio-localhost-alias
        - ${HOSTNAME}.cdlib.org
    volumes:
    - my-minio:/buckets
    restart: unless-stopped
  ezid:
    container_name: ezid
    image: ${ECR_REGISTRY}/mock-merritt-it:dev
    ports:
    - published: 4567
      target: 4567
    networks:
      merrittnet:
    restart: unless-stopped
  merritt-init:
    container_name: merritt-init
    image: ${ECR_REGISTRY}/mrt-init
    build:
      context: merritt-init
      dockerfile: Dockerfile
    networks:
      merrittnet:
    depends_on:
    - inventory
    entrypoint:
      - /bin/bash
      - '-c'
      - |
          echo "*** Merritt Initialization"
          echo "    ----------------------"
          echo "*** Pause 30 seconds then init the inventory service"
          sleep 30
          echo "*** Starting the inventory service"
          curl -v -X POST http://inventory:8080/inventory/service/start?t=json
          echo "*** Starting the replic service"
          curl -v -X POST http://replic:8080/replic/service/start?t=json
          echo "*** Starting the audit service"
          curl -v -X POST http://audit:8080/audit/service/start?t=json
  replic:
    container_name: replic
    # image: ${ECR_REGISTRY}/scratch
    image: ${ECR_REGISTRY}/mrt-replic:dev
    build:
      context: replic/mrt-replic
      dockerfile: Dockerfile
      args:
        ECR_REGISTRY: ${ECR_REGISTRY}
    networks:
      merrittnet:
    ports:
    - published: 8092
      target: 8080
    environment:
      SSM_SKIP_RESOLUTION: Y
      MERRITT_REPLIC_INFO: replic-info-docker
      NODE_TABLE: nodes-pairtree-docker
      SERVICE: replic
      HOSTNAME: replic
      LOGLEVEL: info
    restart: unless-stopped
    stdin_open: true
    tty: true
  audit:
    container_name: audit
    # image: ${ECR_REGISTRY}/scratch
    image: ${ECR_REGISTRY}/mrt-audit:dev
    build:
      context: audit/mrt-audit
      dockerfile: Dockerfile
      args:
        ECR_REGISTRY: ${ECR_REGISTRY}
    networks:
      merrittnet:
    ports:
    - published: 8093
      target: 8080
    environment:
      SSM_SKIP_RESOLUTION: Y
      MERRITT_AUDIT_INFO: audit-info-docker
      NODE_TABLE: nodes-pairtree-docker
      SERVICE: audit
      HOSTNAME: audit
      LOGLEVEL: info
      # Uncomment the followign lines to increase throughput of the audit service
      # AUDIT_THREAD_POOL: 5
      # AUDIT_SLEEP_MS: 100
      # AUDIT_QUEUE_CAPACITY: 300
    restart: unless-stopped
    stdin_open: true
    tty: true
  callback:
    networks:
      merrittnet:
    container_name: callback
    image: ${ECR_REGISTRY}/callback
    build:
      context: callback
      dockerfile: Dockerfile
    ports:
    - published: 8098
      target: 8098
    restart: unless-stopped
    stdin_open: true
    tty: true
