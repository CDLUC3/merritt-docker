# docker gelf log-driver -> Logstash -> OpenSearch pipeline.

input {
  file {
    type => "tomcat_access"
    path => "/logfiles/*/localhost_access*"
    start_position => "beginning"
  }
  file {
    type => "tomcat_app"
    path => "/logfiles/*/log4j-ecs*"
    start_position => "beginning"
  }
  file {
    type => "ui"
    path => "/logfiles/*/lograge_docker.log"
    start_position => "beginning"
  }
}

filter {
  if [type] == "ui" {
    json {
      skip_on_invalid_json => true
      source => "message"
      target => "json_data"
      add_tag => [ "_message_json_parsed" ]
    }
  }
  else if [type] == "tomcat_app" {
    json {
      skip_on_invalid_json => true
      source => "message"
      target => "json_data"
      add_tag => [ "_message_json_parsed" ]
    }
  }
  else if [type] == "tomcat_access" {
    grok {
      #10.10.179.7 - - [19/May/2023:00:03:37 +0000] "GET /foo.txt HTTP/1.1" 404 758
      pattern_definitions => { 
        "REQUEST_LINE" => "(?:%{WORD:verb} %{URIPATHPARAM:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})"
        "URIPATHPARAM" => "%{URIPATH:request_path}(?:%{URIPARAM:request_params})?"
      }
      match => {
        "message" => '%{IPORHOST:serverip} - - \[(?<timestamp>%{MONTHDAY}/%{MONTH}/%{YEAR}:%{TIME} [\+\-][0-9]{4,4})\] "%{REQUEST_LINE}" %{INT:response:int} %{INT:received_bytes:int}'
      }
      overwrite => [ "message" ]
      remove_field => [ "ident", "auth" ]
    }
    useragent {
      source => "agent"
      target => "ua"
      remove_field => [ "agent" ]
    }
  }
}

output {
  opensearch {
    hosts => ["https://opensearch:9200"]
    #index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
    user => "admin"
    password => "admin"
    ssl_certificate_verification => false
  }
}

